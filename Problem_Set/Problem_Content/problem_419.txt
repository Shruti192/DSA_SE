b'\nIn Domino Solitaire, you have a grid with two rows and NN columns. Each square in the grid contains an integer AA. You are given a supply of rectangular 2\xc3\x9712\xc3\x971 tiles, each of which exactly covers two adjacent squares of the grid. You have to place tiles to cover all the squares in the grid such that each tile covers two squares and no pair of tiles overlap.\nThe score for a tile is the di\xef\xac\x80erence between the bigger and the smaller number that is covered by the tile. The aim of the game is to maximize the sum of the scores of all the tiles.\nHere is an example of a grid, along with two different tilings and their scores.The score for Tiling 11 is 12 = (9 \xe2\x88\x92 8) + (6 \xe2\x88\x92 2) + (7 \xe2\x88\x92 1) + (3 \xe2\x88\x92 2) while the score for Tiling 22 is 6 = (8 \xe2\x88\x92 6) + (9 \xe2\x88\x92 7) + (3 \xe2\x88\x92 2) + (2 \xe2\x88\x92 1). There are other tilings possible for this grid, but you can check that Tiling 11 has the maximum score among all tilings. Your task is to read the grid of numbers and compute the maximum score that can be achieved by any tiling of the grid.\n\nYour task is to read the grid of numbers and compute the maximum score that can be achieved by any tiling of the grid.\nInput Format\nThe \xef\xac\x81rst line contains one integer NN, the number of columns in the grid. This is followed by 22 lines describing the grid. Each of these lines consists of NN integers, separated by blanks.\nOutput Format\nA single integer indicating the maximum score that can be achieved by any tiling of the given grid.\nConstraints\n\n1\xe2\x89\xa4N\xe2\x89\xa41051\xe2\x89\xa4N\xe2\x89\xa4105\n1\xe2\x89\xa4A\xe2\x89\xa41041\xe2\x89\xa4A\xe2\x89\xa4104\n\nSubtasks\n\nSubtask 1 (100 points): Original constraints.\n\n\n                        Sample Input 1\n                        \n\n\n\n\n\n4\n8 6 2 3\n9 7 1 2\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n12\n\n\nExplanation\nExplained in the statement.\n\n\n\nAuthor:\n2\xe2\x98\x85yogesh01\n\n\nTags:\n\n               \n                 DP Approach\n                 \n                     \n                     Algorithms, Dynamic Programming\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\nN/A\n\n\nDate Added:\n15-11-2014\n\n\nTime Limit:\n3 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'
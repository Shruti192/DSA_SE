b"\nRead problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nChef has a memory machine. It has one layer for data storage and another layer for cache. Chef has stored an array with length NN in the first layer; let's denote its elements by A0,A1,\xe2\x80\xa6,AN\xe2\x88\x921A0,A1,\xe2\x80\xa6,AN\xe2\x88\x921. Now he wants to load some elements of this array into the cache.\nThe machine loads the array in blocks with size BB: A0,A1,\xe2\x80\xa6,AB\xe2\x88\x921A0,A1,\xe2\x80\xa6,AB\xe2\x88\x921 form a block, AB,AB+1,\xe2\x80\xa6,A2B\xe2\x88\x921AB,AB+1,\xe2\x80\xa6,A2B\xe2\x88\x921 form another block, and so on. The last block may contain less than BB elements of Chef's array. The cache may only contain at most one block at a time. Whenever Chef tries to access an element AiAi, the machine checks if the block where AiAi is located is already in the cache, and if it is not, loads this block into the cache layer, so that it can quickly access any data in it. However, as soon as Chef tries to access any element that is outside the block currently loaded in the cache, the block that was previously loaded into the cache is removed from the cache, since the machine loads a new block containing the element that is being accessed.\nChef has a sequence of elements Ax1,Ax2,\xe2\x80\xa6,AxMAx1,Ax2,\xe2\x80\xa6,AxM which he wants to access, in this order. Initially, the cache is empty. Chef is wondering how many times the machine will need to load a block into the cache layer. Can you help him calculate this number?\nInput\n\nThe first line of the input contains a single integer TT denoting the number of test cases. The description of TT test cases follows.\nThe first line of each test case contains three space-separated integers NN, BB and MM.\nThe second line contains MM space-separated integers x1,x2,\xe2\x80\xa6,xMx1,x2,\xe2\x80\xa6,xM.\n\nOutput\nFor each test case, print a single line containing one integer \xe2\x80\x95 the number of times the machine loads a block into the cache.\nConstraints\n\n1\xe2\x89\xa4T\xe2\x89\xa41001\xe2\x89\xa4T\xe2\x89\xa4100\n1\xe2\x89\xa4N,B,M\xe2\x89\xa45,0001\xe2\x89\xa4N,B,M\xe2\x89\xa45,000\n0\xe2\x89\xa4xi<N0\xe2\x89\xa4xi<N for each valid ii\n\n\n                        Sample Input 1\n                        \n\n\n\n\n\n1\n5 3 3\n0 3 4\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n2\n\n\nExplanation\nExample case 1: The machine stores elements [A0,A1,A2][A0,A1,A2] in one block and [A3,A4][A3,A4] in another block. When accessing A0A0, the block [A0,A1,A2][A0,A1,A2] is loaded. Then, accessing A3A3 removes the previous block from the cache and loads the block [A3,A4][A3,A4]. Finally, when Chef accesses A4A4, a new block is not loaded, since the block containing A4A4 is currently loaded in the cache.\n\n\n\nAuthor:\n6\xe2\x98\x85rezwanarefin01\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/CACHEHIT\n\n\nTags:\n\n               \n                 Basic Maths, Brute Force, Implementation\n                 \n                     \n                     Mathematics, Algorithms\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n1320\n\n\nDate Added:\n13-06-2020\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"
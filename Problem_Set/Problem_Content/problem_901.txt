b'\n\xc2\xa0\nRio Olympics hosted a series of versatile events at its different venues. One such venue was the Maracana Stadium located at northern Rio de Janerio. So, here is your chance to play the role of Manager and roll back in past to organise some events at the Maracana Stadium. However, make sure that you organise the events in such a way that the stadium remains occupied for the largest amount of time.\n\nYou will be provided with some events with their starting date and their duration (in days) that will be required for event to conclude. Make sure that you choose the best alternatives to keep the stadium allocated to the fullest.\n\xc2\xa0For example,\n\nEvent noStart dateEnd date\n\n114\n295\n364\n462\n5155\n697\n\n\nInput\n\nThe first line of input will contain a single integer n denoting the number of events. The next n lines will contain two space separated integers si and di denoting the start date and duration of days, respectively.\n\n\nOutput\nThe output will contain a single line containing space separated integers which would be the serial numbers of events, starting from 1,2,...n which are supposed to be hosted in the Maracana stadium, such the stadium is used to its fullest. Sort the events in the output with increasing start date.\n\nConstraints\nShould contain all the constraints on the input data that you may have. Format it like:\n\n1 \xe2\x89\xa4 si \xe2\x89\xa4 31\n1 \xe2\x89\xa4 di \xe2\x89\xa4 15\n1 \xe2\x89\xa4 n \xe2\x89\xa4 40\n\n\xc2\xa0\nExample\nInput:\n6\n1 4\n9 5\n6 4\n6 2\n15 5\n9 7\n\n\n\nOutput:\n1 4 2 5\n\n\xc2\xa0\nExplanation\nThe Gantt chart shown below is self explanatory as to why events 1, 2, 4 and 5 have been selected. They keep the stadium occupied for maximum duration (16 days).\n\n\n\n\n\n\n\n\nAuthor:\nabhirajphadnis\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/RIO2\n\n\nTags:\n\n               \n                 abhirajphadnis, dynamic-programming, programming\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\nN/A\n\n\nDate Added:\n7-10-2016\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'
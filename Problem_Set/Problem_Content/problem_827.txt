b"\nRead problems statements Mandarin , Bengali , Hindi , Russian and Vietnamese as well.\nShareChatland is a grid with NN rows (numbered 00 through N\xe2\x88\x921N\xe2\x88\x921) and MM columns (numbered 00 through M\xe2\x88\x921M\xe2\x88\x921). There is a prince and a princess in this land; initially, the prince is in cell (0,0)(0,0) and the princess is in cell (N\xe2\x88\x921,M\xe2\x88\x921)(N\xe2\x88\x921,M\xe2\x88\x921).\nThe prince and princess want to meet. The prince has a visibility radius R1R1. In one step, he can move to any cell such that the Manhattan distance between this cell and his current cell is \xe2\x89\xa4R1\xe2\x89\xa4R1 (staying in the same cell is also possible). The princess has a visibility radius R2R2 and moves in a similar way.\nThere are also KK evil minions in the grid. A minion is initially located at (x1,y1)(x1,y1) and moves to (x2,y2)(x2,y2); it is guaranteed that these cells are either in the same row or in the same column, i.e. x1=x2x1=x2 or y1=y2y1=y2. In one step, a minion moves to the adjacent cell that's closest to its target cell. When it reaches (x2,y2)(x2,y2), it starts moving to (x1,y1)(x1,y1), then back to (x2,y2)(x2,y2) and so on.\nThe prince and princess can see minions, but they cannot see each other. Therefore, in each step, the prince and princess both uniformly randomly choose cells within their visibility radii that are not occupied by minions after this step and move to these cells. Simultaneously, the minions make their moves. (That means it is allowed for the prince or princess and a minion to swap places in one step.) If the prince or princess does not have any cell to move to, then he or she dies.\nFind the probability that the prince and princess meet (are located in the same cell) after exactly tt steps. This probability can be expressed as a fraction P/QP/Q, where PP and QQ are coprime integers; you should compute P\xe2\x8b\x85Q\xe2\x88\x921P\xe2\x8b\x85Q\xe2\x88\x921 modulo 109+7109+7, where Q\xe2\x88\x921Q\xe2\x88\x921 is the multiplicative inverse of QQ modulo 109+7109+7 (it can be proven that this number exists and is unique).\nInput\n\nThe first line of the input contains six space-separated integers NN, MM, R1R1, R2R2, KK and tt.\nEach of the following KK lines contains four space-separated integers x1x1, y1y1, x2x2 and y2y2 describing a minion.\n\nOutput\nPrint a single line containing one integer \xe2\x80\x94 the required probability as P\xe2\x8b\x85Q\xe2\x88\x921P\xe2\x8b\x85Q\xe2\x88\x921 modulo 109+7109+7.\nConstraints\n\n1\xe2\x89\xa4N\xe2\x8b\x85M\xe2\x89\xa41001\xe2\x89\xa4N\xe2\x8b\x85M\xe2\x89\xa4100\n1\xe2\x89\xa4R1,R2\xe2\x89\xa4N+M1\xe2\x89\xa4R1,R2\xe2\x89\xa4N+M\n0\xe2\x89\xa4K\xe2\x89\xa4100\xe2\x89\xa4K\xe2\x89\xa410\n1\xe2\x89\xa4t\xe2\x89\xa41091\xe2\x89\xa4t\xe2\x89\xa4109\n0\xe2\x89\xa4x1,x2\xe2\x89\xa4N\xe2\x88\x9210\xe2\x89\xa4x1,x2\xe2\x89\xa4N\xe2\x88\x921\n0\xe2\x89\xa4y1,y2\xe2\x89\xa4M\xe2\x88\x9210\xe2\x89\xa4y1,y2\xe2\x89\xa4M\xe2\x88\x921\nfor each minion, either x1=x2x1=x2 or y1=y2y1=y2\n|x1\xe2\x88\x92x2|+|y1\xe2\x88\x92y2|\xe2\x89\xa44|x1\xe2\x88\x92x2|+|y1\xe2\x88\x92y2|\xe2\x89\xa44\n\nSubtasks\nSubtask #1 (30 points): K=0K=0\nSubtask #2 (70 points): original constraints\n\n                        Sample Input 1\n                        \n\n\n\n\n\n2 2 1 1 1 1\n1 0 1 1\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n333333336\n\n\nExplanation\nThere is one minion, initially in cell (1,0)(1,0). This minion is moving back and forth between cells (1,0)(1,0) and (1,1)(1,1). That is, after 11 step, its position is (1,1)(1,1), after 22 steps, it is (1,0)(1,0) and so on.\nWe are interested in the situation after 11 step. Then, the prince can be at (0,0)(0,0), (1,0)(1,0) or (0,1)(0,1), and the princess can be at (0,1)(0,1) or (1,0)(1,0). Note that she cannot choose to stay at (1,1)(1,1), since the minion is there at that time. The probability of them meeting is 1/31/3, which is 333333336333333336 modulo 109+7109+7.\n\n\n\nAuthor:\n7\xe2\x98\x85nots0fast\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/PPAP\n\n\nTags:\n\n               \n                 Probability, Matrix Exponentiation, Dynamic Programming\n                 \n                     \n                     Mathematics, Matrices, Matrix Multiplication, Algorithms\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2992\n\n\nDate Added:\n21-11-2018\n\n\nTime Limit:\n2 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"
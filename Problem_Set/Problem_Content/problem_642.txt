b"\nHeavy-light decomposition of a tree is a powerful tool that often helps in the most difficult tree data structure problems.\nHeavy-light decomposition is to be built on a rooted tree. In this problem, the node with the number 1 should be considered the root of a tree. Heavy light decomposition is a colouring of edges of the tree. Each edge is either heavy or light. For each non leaf node (node having degree greater than 1), from all the edges emanating from it into the subtree rooted at this vertex should have exactly one heavy edge. \n\nThe heavy-light decomposition is called correct, if you can reach any node from the root node by using no more that \xe2\x8c\x8a log2 N \xe2\x8c\x8b light edges, where N is the number of nodes in the tree.\nGiven a tree, calculate the number of its' correct heavy-light decompositions. As answer could be very large, please print it modulo 19101995.\nInput\nThere is exactly one test case.\nThe first line of input consists of a single integer N, denoting the number of the nodes in the tree.\nEach of the following N - 1 lines contains a pair of integers, denoting the numbers of the nodes that are connected with an edge. The nodes are enumerated by positive integers in the range [1; N].\nOutput\nOutput the number of correct heavy-light decompositions of the given tree. Since this number can be huge, please output it modulo 19101995.\nConstraints\n\n(Subtask 1): 1 \xe2\x89\xa4 N \xe2\x89\xa4 20 - 21 point.\n(Subtask 2): 1 \xe2\x89\xa4 N \xe2\x89\xa4 1000 - 34 points.\n(Subtask 3): 1 \xe2\x89\xa4 N \xe2\x89\xa4 100000 - 45 points.\n\n\n                        Sample Input 1\n                        \n\n\n\n\n\n7\n1 2\n3 1\n3 4\n3 5\n2 6\n2 7\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n8\n\n\nExplanation\nExample case 1. Input is a complete binary tree. It consists of 7 nodes, therefore you can't have more than ?log2 7? = ?(2.80735492206)? = 2  light edges on the path from the root node to any other one. But the tree's height is 2, so you can choose the decomposition in any way you like. All the decompositions will be correct ones. There are three nodes that has outgoing edges from them (in the direction opposite to the root's one), their numbers are 1, 2 and 3. Each of them has 2 outgoing edges from which you can colour exactly one of them heavy, so overall you'll have 2 * 2 * 2 = 8 options of creating the correct heavy-light decompositions.\n\n\n\nAuthor:\nsergey_adm\n\n\nTester:\n4\xe2\x98\x85furko\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/HLDOTS\n\n\nTags:\n\n               \n                 Trees, Dynamic Programming\n                 \n                     \n                     Data Structures, Graphs, Algorithms\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2632\n\n\nDate Added:\n23-01-2015\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"
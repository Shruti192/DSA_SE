b'\nIt is the last day of covid and you are coming back to your home with two empty sacks. On\nthe way to your home, you found Ambani brothers donating all their wealth in form of coins\nafter getting fed up with all the money they have. The coins have both positive and negative\nvalues and they are laid down in a line. Now as you don\xe2\x80\x99t want to go with an empty sack so\nyou also decided to take some of the money being given by Ambani\xe2\x80\x99s. But anyone who\nwants the money has to follow a rule that he/she can choose an only contiguous segment of\ncoins which are lying in a line (you can also imagine it like an array of coins) whether its value\nis positive or negative.\nFormally according to the rule if you are given an array [-1,2,3,4,2,0] you can only choose\nsubarrays like [2,3], [4,2,0], [-1] , [-1,2,3,4,2,0] etc.\nNow as you have two siblings you decided to fill both the sacks with some coins. Your task is\nto choose the coins in such a way that the sum of values of all the coins(including sacks 1\nand 2) is maximum and both sacks are non-empty.\nFor e.g.:\nIf the array of coins is:\n-1 2 3 4 -3 -5 6 7 1\nFollowing are some ways you can choose the coins:\n2 3 4 and -5 6 7\n-1 2 3 and 6 7 1\n2 3 4 and 6 7 1\nand so on\xe2\x80\xa6.\nYou can see that among the given ways the 3rd way will yield maximum values (2+3+4) +\n(6+7+1)=23\nNote: \nBoth the sack should be non-empty.\nA subarray is a contiguous part of an array. An array that is inside another array.\nA coin can be inserted in one and only one sacks i.e you cannot choose a coin more than one time.\nInput:\n\nThe first line contains nn, the number of coins in the array cc.\nThe next line will contain nn space integers denoting the value coincoin c[i]c[i].\n\nOutput:\nOne and the only line containing the maximum possible sum of values of all the coins in\nboth sacks.\nConstraints\n\n2\xe2\x89\xa4n\xe2\x89\xa41052\xe2\x89\xa4n\xe2\x89\xa4105\n\xe2\x88\x92105\xe2\x89\xa4c[i]\xe2\x89\xa4105\xe2\x88\x92105\xe2\x89\xa4c[i]\xe2\x89\xa4105\n\nSample Input 1:\n9\n\n-1 2 3 4 -3 -5 6 7 1\nSample Output 1:\n23\n\nSample Input 2:\n6\n\n-10 -1 -30 -40 -3 -11\nSample Output 2:\n-4\n\nEXPLANATION:\nIn first test case you can easily observe that the sum will be maximum if you choose [2,3,4]\nand [6,7,1] contiguous subarrays from the given array.\n\n\n\nAuthor:\n3\xe2\x98\x85decipher_\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/TSOH\n\n\nTags:\n\n               \n                 decipher_, dynamic-programming, kadane-algorithm, popu2021\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\nN/A\n\n\nDate Added:\n6-01-2021\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'
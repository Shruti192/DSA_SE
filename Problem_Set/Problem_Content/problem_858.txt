b'\nBill is a billionaire but very down-to-earth. He finds peace in donating gold coins to charities. He always liked the gold coins he had and used to number them with integers. One day he decided to donate NN coins (coins numbered 11 to NN) to CC charities in the country. But Bill is a very moody person, some day he orders that each charity must receive at least one coin, sometimes he says at least two coins and some times at least three coins. But, every charity must receive coins. Bill\xe2\x80\x99s assistant Alice was once interested in the following question: In how many different ways can the NN coins be distributed to the CC charities, based on the order given by Bill? \nThe charities can be assumed to be identical, i.e, ordering on the charities doesn\xe2\x80\x99t matter. But ordering on the coins matters as all coins are uniquely numbered. For example, even if we fix that one charity gets 11 coin and the other gets 22, then the possible different ways of distribution are {(1){(1), (2,3)}(2,3)}, {(2){(2), (1,3)}(1,3)} and {(3){(3),(1,2)}(1,2)}.\nNote: On a day, Bill either orders that each charity gets at least 11 coins, or at least 22 coins or at least 33 coins only. For a day, this value is fixed [11, 22 or 33]. Also, all coins are to be distributed.\nInput:\n\nThe first line of the input contains a single integer TT denoting the number of test cases. The description of TT test cases follows.\nThe first and only line of each test case contains three space-separated integers NN,CC,MM, denoting number of coins, number of charities and the minimum number of coins to be given to each charity[11, 22 or 33].\n\nOutput:\nFor each test case, output in a single line an integer denoting the total number different ways to distribute the NN coins to the CC charities with each charity getting at least MM coins. (charities can be assumed identical, whereas the coins are unique and labelled).\nAs the answer can be huge, print the answer modulo 109+7109+7\nConstraints\n\n1\xe2\x89\xa4T\xe2\x89\xa41001\xe2\x89\xa4T\xe2\x89\xa4100\n1\xe2\x89\xa4C\xe2\x89\xa4N\xe2\x89\xa410001\xe2\x89\xa4C\xe2\x89\xa4N\xe2\x89\xa41000\nM\xe2\x88\x88{1,2,3}M\xe2\x88\x88{1,2,3}\n\nSample Input:\n3\n5 3 1\n5 2 2\n6 2 3\n\nSample Output:\n25\n10\n10\n\n\n\n\nAuthor:\n5\xe2\x98\x85kishen1912000\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/DONATE\n\n\nTags:\n\n               \n                 cnxh2020, combinatorics, dynamic-programming, kishen1912000\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\nN/A\n\n\nDate Added:\n4-01-2020\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'
b"\nThere are NN people standing in a line from left to right. The ii-th person from the left has a height HiHi. HH is a permutation of 11 to NN. \nFirst, you must assign each of them a shirt with the letter LL or RR on it. Then you may perform the following operation any number of times (possibly zero):\n\nChoose a person with LL on their shirt and move them to the left end of the line.\nChoose a person with RR on their shirt and move them to the right end of the line.\n\nFor example, if H=[4,1,2,3]H=[4,1,2,3] and we assign the shirts to the people as [(4,R),(1,L),(2,L),(3,R)][(4,R),(1,L),(2,L),(3,R)], then if we move person 11 to the right end of the line the arrangement of people becomes [(1,L),(2,L),(3,R),(4,R)][(1,L),(2,L),(3,R),(4,R)]\nAn assignment of shirts is called good if it is possible to sort the people in the line in non-decreasing order of height from left to right by using this operation zero or more times.\nHow many good assignments of shirts exist? Since this number may be large, print it modulo 109+7109+7.\nOne assignment of shirts is different from another assignment if there exists at least one person who is assigned a shirt with a different letter on it.\nInput Format\n\nThe first line of the input contains a single integer TT - the number of test cases. The description of TT test cases follows.\nThe first line of each test case contains a single integer NN - the number of people.\nThe second line contains NN space-separated integers H1,H2,\xe2\x80\xa6,HNH1,H2,\xe2\x80\xa6,HN - the heights of the NN people.\n\nOutput Format\nFor each test case, print a single line containing one integer \xe2\x80\x95 the number of good assignments of shirts modulo 109+7109+7.\nConstraints\n\n1\xe2\x89\xa4T\xe2\x89\xa41051\xe2\x89\xa4T\xe2\x89\xa4105\n1\xe2\x89\xa4N\xe2\x89\xa41061\xe2\x89\xa4N\xe2\x89\xa4106\n1\xe2\x89\xa4Hi\xe2\x89\xa4N1\xe2\x89\xa4Hi\xe2\x89\xa4N\nHH is a permutation of 1,2,\xe2\x80\xa6,N1,2,\xe2\x80\xa6,N.\nthe sum of NN over all test cases does not exceed 106106\n\n\n                        Sample Input 1\n                        \n\n\n\n\n\n6\n2\n2 1\n1\n1\n5\n1 2 3 4 5\n4\n1 3 4 2\n7\n6 1 7 3 5 4 2\n9\n6 5 9 3 7 1 2 4 8\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n3\n2\n32\n7\n11\n16\n\n\nExplanation\nTest case 1: \n\nFor the assignment [L,L][L,L], we can sort the line in non-decreasing order by moving person 22 to the left end of the line.\nFor the assignment [R,R][R,R], we can sort the line in non-decreasing order by moving person 11 to the right end of the line.\nFor the assignment [R,L][R,L], we can sort the line in non-decreasing order by moving person 11 to the right end of the line or by moving person 22 to the left end of the line.\nFor the assignment [L,R][L,R], all possible operations don't change the order of people in the line. So it is impossible to sort line in non-descending order of height.\n\nTest case 2:  A line with a single person is always sorted in non-decreasing order regardless of the operations performed, so both possible assignments of shirts are valid.\nTest case 3: For any assignment of shirts, we can sort the line in non-descending order by performing zero operations as the line is already sorted in non-decreasing order. So all 25=3225=32 assignments of shirts are valid.\nTest case 4: The 77 good assignments of shirts are:\n\nLLLLLLLL\nLRLLLRLL\nLLRLLLRL\nLRRLLRRL\nRRRLRRRL\nLRRRLRRR\nRRRRRRRR\n\n\n\n\nAuthor:\n6\xe2\x98\x85explodingfrz\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/LRSHIRTS\n\n\nTags:\n\n               \n                 combinatorics, dynamic-programming, easy-medium, explodingfrz, sliding-window, start32\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2904\n\n\nDate Added:\n25-03-2022\n\n\nTime Limit:\n1.5 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"
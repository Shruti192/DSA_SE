b"\nRead problem statements in Mandarin, Russian, and Vietnamese as well.\nYou have an n\xc3\x97nn\xc3\x97n matrix aa. You can rearrange the elements of the matrix in any way. Let m1,m2,\xe2\x80\xa6,mnm1,m2,\xe2\x80\xa6,mn be the medians of each row in aa after the rearrangement. The goodness of the matrix aa is defined as the minimum median among the medians of all rows i.e min(m1,m2,\xe2\x80\xa6,mn)min(m1,m2,\xe2\x80\xa6,mn). Naturally, rearranging values also comes with a cost. The cost of rearrangement is defined as m1+m2+\xe2\x8b\xaf+mnm1+m2+\xe2\x8b\xaf+mn. \nFind the maximum goodness you can achieve after rearranging a matrix aa such that the cost of rearrangement doesn't exceed kk or \xe2\x88\x921\xe2\x88\x921 if the answer doesn't exist.\nThe median of an array aa consisting of nn elements is the \xe2\x8c\x88n+12\xe2\x8c\x89th\xe2\x8c\x88n+12\xe2\x8c\x89th smallest element of aa. The median of [4,8,6,1][4,8,6,1] is 66 and the median of [1,6,2,4,5][1,6,2,4,5] is 44.\nInput Format\n\nThe first line of the input contains a single integer tt denoting the number of test cases. The description of tt test cases follows.\nThe first line of each test case consists of two space-separated integers nn and kk.\nnn lines follow, each consisting of nn space-separated integers denoting the matrix aa\n\nOutput Format\nFor each test case, print a single line containing one integer - the maximum goodness you can achieve such that the rearrangement cost does not exceed kk or -1 if the answer doesn't exist.\nConstraints\n\n1\xe2\x89\xa4t\xe2\x89\xa41001\xe2\x89\xa4t\xe2\x89\xa4100\n1\xe2\x89\xa4n\xe2\x89\xa410001\xe2\x89\xa4n\xe2\x89\xa41000\n1\xe2\x89\xa4k\xe2\x89\xa410141\xe2\x89\xa4k\xe2\x89\xa41014\n1\xe2\x89\xa4ai,j\xe2\x89\xa41091\xe2\x89\xa4ai,j\xe2\x89\xa4109\n1\xe2\x89\xa4\xe2\x88\x91n\xe2\x89\xa410001\xe2\x89\xa4\xe2\x88\x91n\xe2\x89\xa41000\n\nSubtasks\n\nSubtask 1 (20 points): k=1014k=1014\nSubtask 2 (40 points): 1\xe2\x89\xa4\xe2\x88\x91n\xe2\x89\xa4701\xe2\x89\xa4\xe2\x88\x91n\xe2\x89\xa470\nSubtask 3 (40 points): Original constraints\n\n\n                        Sample Input 1\n                        \n\n\n\n\n\n3\n4 100\n13 2 1 16\n15 24 3 3\n5 17 9 8\n9 6 11 32\n4 40\n13 2 1 16\n15 24 3 3\n5 17 9 8\n9 6 11 32\n3 1\n3 4 2\n5 7 9\n2 1 1\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n9\n6\n-1\n\n\nExplanation\nTest case 11:  We rearrange the matrix as follows:\n\xe2\x8e\xa1\xe2\x8e\xa3\xe2\x8e\xa2\xe2\x8e\xa2\xe2\x8e\xa211175322315911368163249\xe2\x8e\xa4\xe2\x8e\xa6\xe2\x8e\xa5\xe2\x8e\xa5\xe2\x8e\xa5[11211617313351562432989]\n. The medians of each row are 11,13,15,911,13,15,9 respectively. The goodness is 99 and the cost is 4848. There are other rearrangements that may yield the same goodness but 99 is the maximum goodness we can get. \nTest case 22:  The rearranged matrix is:\n\xe2\x8e\xa1\xe2\x8e\xa3\xe2\x8e\xa2\xe2\x8e\xa2\xe2\x8e\xa217211531322486159316139\xe2\x8e\xa4\xe2\x8e\xa6\xe2\x8e\xa5\xe2\x8e\xa5\xe2\x8e\xa5[17383216161132151352499]\n. The medians of each row are 8,6,15,98,6,15,9 respectively. The goodness is 66 and the cost is 3838. There are other rearrangements that may yield the same goodness but 66 is the maximum goodness we can get. \nTest case 33:  No matter how we rearrange the elements, the cost is always greater than kk.\n\n\n\nAuthor:\n4\xe2\x98\x85saarang123\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/MEDMAX\n\n\nTags:\n\n               \n                 2D Arrays, Basic Maths, Greedy, Sorting, Binary Search, Prefix Sum\n                 \n                     \n                     Data Structures, Arrays, Mathematics, Algorithms, Searching, Simple Algos\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2364\n\n\nDate Added:\n17-10-2021\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"
b"\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nYou are given a tree with NN nodes (numbered 11 through NN), rooted at node 11. For each valid ii, node ii has a value aiai written on it.\nAn undirected simple path between any two nodes uu and vv is said to be vertical if u=vu=v or uu is an ancestor of vv or vv is an ancestor of uu. Let's define a vertical partition of the tree as a set of vertical paths such that each node belongs to exactly one of these paths.\nYou are also given a sequence of NN integers b1,b2,\xe2\x80\xa6,bNb1,b2,\xe2\x80\xa6,bN. A vertical partition is good if, for each of its paths, we can permute the values written on the nodes in this path, and this can be done in such a way that we reach a state where for each valid ii, the value written on node ii is bibi.\nThe difficulty of your task is described by a parameter SS. If S=1S=1, your task is only to determine whether at least one good vertical partition exists. If S=2S=2, you are required to find the number of good vertical partitions modulo 1,000,000,0071,000,000,007 (109+7109+7).\nInput\n\nThe first line of the input contains a single integer TT denoting the number of test cases. The description of TT test cases follows.\nThe first line of each test case contains two space-separated integers NN and SS.\nEach of the next N\xe2\x88\x921N\xe2\x88\x921 lines contains two space-separated integers uu and vv denoting that nodes uu and vv are connected by an edge.\nThe next line contains NN space-separated integers a1,a2,\xe2\x80\xa6,aNa1,a2,\xe2\x80\xa6,aN.\nThe line after that contains NN space-separated integers b1,b2,\xe2\x80\xa6,bNb1,b2,\xe2\x80\xa6,bN.\n\nOutput\nFor each test case, print a single line containing one integer:\n\nIf S=1S=1, this integer should be 11 if a good vertical partition exists or 00 if it does not exist.\nIf S=2S=2, this integer should be the number of good vertical partitions modulo 1,000,000,0071,000,000,007 (109+7109+7).\n\nConstraints\n\n1\xe2\x89\xa4T\xe2\x89\xa41061\xe2\x89\xa4T\xe2\x89\xa4106\n1\xe2\x89\xa4N\xe2\x89\xa41051\xe2\x89\xa4N\xe2\x89\xa4105\nS\xe2\x88\x88{1,2}S\xe2\x88\x88{1,2}\n1\xe2\x89\xa4u,v\xe2\x89\xa4N1\xe2\x89\xa4u,v\xe2\x89\xa4N\nthe graph described on the input is a tree\n1\xe2\x89\xa4ai,bi\xe2\x89\xa41061\xe2\x89\xa4ai,bi\xe2\x89\xa4106 for each valid ii\nthe sum of NN over all test cases does not exceed 106106\n\nSubtasks\nSubtask #1 (40 points, time limit 1 seconds): the sum of NN over all test cases does not exceed 1,0001,000\nSubtask #2 (30 points, time limit 2 seconds): S=1S=1\nSubtask #3 (30 points, time limit 2 seconds): original constraints\n\n                        Sample Input 1\n                        \n\n\n\n\n\n4\n3 2\n1 2\n2 3\n4 5 6\n4 6 5\n6 2\n1 2\n1 3\n2 4\n3 5\n3 6\n10 20 30 40 50 60\n10 40 50 20 30 60\n6 1\n1 2\n1 3\n2 4\n3 5\n3 6\n10 20 30 40 50 60\n10 40 50 20 30 60\n1 2\n1\n2\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n2\n3\n1\n0\n\n\nExplanation\nExample case 1: The good vertical partitions are {[1],[2,3]}{[1],[2,3]} and {[1,2,3]}{[1,2,3]}.\nExample case 2: The good vertical partitions are:\n\n{[1,2,4],[3,5],[6]}{[1,2,4],[3,5],[6]}\n{[1],[2,4],[3,5],[6]}{[1],[2,4],[3,5],[6]}\n{[1,3,5],[2,4],[6]}{[1,3,5],[2,4],[6]}\n\nExample case 3: The same as example case 2, but with S=1S=1.\nExample case 4: There is no good vertical partition.\n\n\n\nAuthor:\na7med1080\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/TREEPERM\n\n\nTags:\n\n               \n                 Deque, Trees, Multiset, Dynamic Programming, Greedy, DFS, BFS\n                 \n                     \n                     Data Structures, Queues, Graphs, Sets, Algorithms, Graph Algos, Traversals\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2367\n\n\nDate Added:\n26-01-2021\n\n\nTime Limit:\n1 - 2 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"
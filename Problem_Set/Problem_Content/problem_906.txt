b'\nThere are NN hill stations numbered from 00 to N\xe2\x88\x921N\xe2\x88\x921, all the stations have some fixed elevations and are connected with every other station directly or indirectly via roads. The roads are bidirectional and there is some cost associated with each of these roads.\nRoads are given in the format [uu, vv, ww] which denotes that there is a road between station uu and station vv with cost ww.\nA path is a sequence of stations [S0S0, S1S1, S2S2, \xe2\x80\xa6\xe2\x80\xa6\xe2\x80\xa6\xe2\x80\xa6 SKSK] such that S0S0 is the starting station and SKSK is the destination station and there is a road between every SiSi & Si+1Si+1, where 0\xe2\x89\xa4i\xe2\x89\xa4K\xe2\x88\x9210\xe2\x89\xa4i\xe2\x89\xa4K\xe2\x88\x921.\nYour task is to find the number of easy paths from station 00 to station N\xe2\x88\x921N\xe2\x88\x921. Easy path is a path that satisfies: elevation(SiSi) > elevation(Si+1Si+1) for 0\xe2\x89\xa4i\xe2\x89\xa4K\xe2\x88\x9210\xe2\x89\xa4i\xe2\x89\xa4K\xe2\x88\x921. \nElevation of a station is defined as the minimum cost of this station from station no. N\xe2\x88\x921N\xe2\x88\x921.\nSince that number may be too large, print it modulo 109109 + 77.\n\nInput:\n\nFirst-line will contain TT the number of test cases.\nThe first line of each test case line will contain two integers, NN the number of hill stations, and EE the number of roads.\nNext EE lines will contain three integers uu, vv & ww, representing a road between uu and vv with cost ww.\n\n\nOutput:\nFor each test case, output in a single integer representing the number of easy paths from station 00 to station N\xe2\x88\x921N\xe2\x88\x921 modulo 109109 + 77.\n\nConstraints\n\n1\xe2\x89\xa4T\xe2\x89\xa4101\xe2\x89\xa4T\xe2\x89\xa410\n2\xe2\x89\xa4N\xe2\x89\xa41042\xe2\x89\xa4N\xe2\x89\xa4104\nN\xe2\x88\x921\xe2\x89\xa4E\xe2\x89\xa4min(4\xe2\x88\x97104,N\xe2\x88\x97(N\xe2\x88\x921)/2)N\xe2\x88\x921\xe2\x89\xa4E\xe2\x89\xa4min(4\xe2\x88\x97104,N\xe2\x88\x97(N\xe2\x88\x921)/2)\n0\xe2\x89\xa4u,v\xe2\x89\xa4N\xe2\x88\x9210\xe2\x89\xa4u,v\xe2\x89\xa4N\xe2\x88\x921\n1\xe2\x89\xa4w\xe2\x89\xa41051\xe2\x89\xa4w\xe2\x89\xa4105\n\n\nSubtasks\n\n Subtask #1 (30 points) : N\xe2\x89\xa420N\xe2\x89\xa420\n Subtask #2 (70 points) : N\xe2\x89\xa4104N\xe2\x89\xa4104\n\n\nSample Input:\n    1\n    6 7\n    0 1 7 \n    1 4 6 \n    1 2 4 \n    2 3 3 \n    2 5 10\n    3 5 1\n    3 4 2\n\n\nSample Output:\n    3\n\n\nEXPLANATION:\n\nEasy Paths:\n[0, 1, 2, 5], [0, 1, 2, 3, 5], [0, 1, 4, 3, 5] \n\n\n\nAuthor:\npec_chapter\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/EPATHS\n\n\nTags:\n\n               \n                 depth-first-search, dijkstra-algorithm, dynamic-programming, pec_chapter, ucsp2021\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\nN/A\n\n\nDate Added:\n31-03-2021\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'
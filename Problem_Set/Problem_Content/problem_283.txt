b'\nYou have a grid with NN rows and MM columns in which KK cells are black and the rest are white.\nLet (i,j)(i,j) represent the cell in the ii-th row from the top and the jj-th column from the left. \nIf you are currently at cell (i,j)(i,j), you can:\n\nmove one cell down to (i+1,j)(i+1,j)\nmove one cell right to (i,j+1)(i,j+1)\n\nThe cost of a path is defined as the number of times you move between two cells that have different colours.\nYou are given QQ queries. In the ii-th query, you are initially at (1,1)(1,1) and want to reach (Xi,Yi)(Xi,Yi) with the minimum cost.\nFor each query, before you begin, you can perform the following operation any number of times (possibly zero):\n\nChoose a column and flip the colour of all cells in this column (i.e. change the colour of all the black cells to white and the colour of all the white cells to black in this column)\n\nFor each query, what is the minimum cost of a path from (1,1)(1,1) to (Xi,Yi)(Xi,Yi) after performing this operation any number of times (possibly zero)?\nNote: The operations applied in different queries are independent of each other.\nInput Format\n\nThe first line of the input contains a single integer TT - the number of test cases. The description of TT test cases follows.\nThe first line of each test case contains three integers NN, MM, KK and QQ - the number of rows, the number of columns, the number of black cells and the number of queries respectively.\nThe following KK lines each contain two integers AiAi and BiBi - indicating that the ii-th black cell is at (Ai,Bi)(Ai,Bi).\nThe following QQ lines each contain two integers XiXi and YiYi - the destination cell of the ii-th query.\n\nOutput Format\nFor each test case, print a single line containing QQ space separated integers \xe2\x80\x95 the answer for each of the QQ queries.\nConstraints\n\n1\xe2\x89\xa4T\xe2\x89\xa41051\xe2\x89\xa4T\xe2\x89\xa4105\n1\xe2\x89\xa4N,M,K,Q\xe2\x89\xa43\xe2\x8b\x851051\xe2\x89\xa4N,M,K,Q\xe2\x89\xa43\xe2\x8b\x85105\n1\xe2\x89\xa4Ai,Xi\xe2\x89\xa4N1\xe2\x89\xa4Ai,Xi\xe2\x89\xa4N\n1\xe2\x89\xa4Bi,Yi\xe2\x89\xa4M1\xe2\x89\xa4Bi,Yi\xe2\x89\xa4M\n(Ai,Bi)\xe2\x89\xa0(Aj,Bj)(Ai,Bi)\xe2\x89\xa0(Aj,Bj) , \xe2\x88\x80i\xe2\x89\xa0j\xe2\x88\x80i\xe2\x89\xa0j\n(Xi,Yi)\xe2\x89\xa0(Xj,Yj)(Xi,Yi)\xe2\x89\xa0(Xj,Yj) , \xe2\x88\x80i\xe2\x89\xa0j\xe2\x88\x80i\xe2\x89\xa0j\nthe sum of NN over all test cases does not exceed 6\xe2\x8b\x851056\xe2\x8b\x85105\nthe sum of MM over all test cases does not exceed 6\xe2\x8b\x851056\xe2\x8b\x85105\nthe sum of KK over all test cases does not exceed 6\xe2\x8b\x851056\xe2\x8b\x85105\nthe sum of QQ over all test cases does not exceed 6\xe2\x8b\x851056\xe2\x8b\x85105\n\n\n                        Sample Input 1\n                        \n\n\n\n\n\n5\n1 1 1 1\n1 1\n1 1\n3 1 2 2\n1 1\n3 1\n2 1\n3 1\n3 4 3 3\n1 2\n2 1\n1 4\n1 4\n3 4\n2 1\n4 3 5 2\n2 1\n2 2\n2 3\n3 2\n4 2\n4 1\n4 2\n6 3 5 2\n2 1\n3 2\n3 3\n5 2\n5 3\n3 3\n6 3\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n0 \n1 2 \n0 0 1 \n2 1 \n1 2 \n\n\nExplanation\nTest case 1:\n\nQuery 1: We are already at (1,1)(1,1), so the minimum cost is 00.\n\nTest case 2: \n\nInitial Grid:\n\n\n\nQuery 1: The only sequence of possible moves is (1,1)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92black to whitecost =\xc2\xa01(2,1)(1,1)\xe2\x86\x92black to whitecost =\xc2\xa01(2,1). So the total cost is 11.\nQuery 2: The only sequence of possible moves is (1,1)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92black to whitecost =\xc2\xa01(2,1)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92white to blackcost =\xc2\xa01(3,1)(1,1)\xe2\x86\x92black to whitecost =\xc2\xa01(2,1)\xe2\x86\x92white to blackcost =\xc2\xa01(3,1). So the cost is 22.\n\nIt can be shown that no better answer is possible by performing any column flipping operations.\nTest case 3:\n\nInitial Grid:\n\n\n\nQuery 1: One optimal solution is to flip columns 22 and 44 to obtain the following grid.\n\n\nThen you can perform the following moves for a cost of 00 -  (1,1)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92white to whitecost =\xc2\xa00(1,2)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92white to whitecost =\xc2\xa00(1,3)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92white to whitecost =\xc2\xa00(1,4)(1,1)\xe2\x86\x92white to whitecost =\xc2\xa00(1,2)\xe2\x86\x92white to whitecost =\xc2\xa00(1,3)\xe2\x86\x92white to whitecost =\xc2\xa00(1,4)\n\nQuery 2: One optimal solution is to flip columns 22.\n\n\nThen you can perform the following moves for a cost of 00 - (1,1)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92white to whitecost =\xc2\xa00(1,2)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92white to whitecost =\xc2\xa00(1,3)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92white to whitecost =\xc2\xa00(2,3)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92white to whitecost =\xc2\xa00(2,4)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92white to whitecost =\xc2\xa00(3,4)(1,1)\xe2\x86\x92white to whitecost =\xc2\xa00(1,2)\xe2\x86\x92white to whitecost =\xc2\xa00(1,3)\xe2\x86\x92white to whitecost =\xc2\xa00(2,3)\xe2\x86\x92white to whitecost =\xc2\xa00(2,4)\xe2\x86\x92white to whitecost =\xc2\xa00(3,4)\n\nQuery 3: One optimal solution is to flip no columns and then perform the following moves for a cost of 11 - (1,1)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92white to blackcost =\xc2\xa01(2,1)(1,1)\xe2\x86\x92white to blackcost =\xc2\xa01(2,1) for a total cost of 11.\n\nTest case 4: \n\nInitial Grid:\n\n\n\nQuery 1: One optimal solution is to flip no columns and then perform the following moves for a cost of 22 -  (1,1)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92white to blackcost =\xc2\xa01(2,1)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92black to whitecost =\xc2\xa01(3,1)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92white to whitecost =\xc2\xa00(4,1)(1,1)\xe2\x86\x92white to blackcost =\xc2\xa01(2,1)\xe2\x86\x92black to whitecost =\xc2\xa01(3,1)\xe2\x86\x92white to whitecost =\xc2\xa00(4,1)\nQuery 2: One optimal solution is to flip no columns and then perform the following moves for a cost of 11 -  (1,1)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92white to blackcost =\xc2\xa01(2,1)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92black to blackcost =\xc2\xa00(2,2)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92black to blackcost =\xc2\xa00(3,2)\xe2\x88\x92\xe2\x86\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92black to blackcost =\xc2\xa00(4,2)(1,1)\xe2\x86\x92white to blackcost =\xc2\xa01(2,1)\xe2\x86\x92black to blackcost =\xc2\xa00(2,2)\xe2\x86\x92black to blackcost =\xc2\xa00(3,2)\xe2\x86\x92black to blackcost =\xc2\xa00(4,2)\n\n\n\n\nAuthor:\n6\xe2\x98\x85explodingfrz\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/AVOIDALT\n\n\nTags:\n\n               \n                 breadth-first-search, dynamic-programming, explodingfrz, greedy, medium, observation, shortest-path, sliding-window, start32\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n3145\n\n\nDate Added:\n27-03-2022\n\n\nTime Limit:\n3 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'
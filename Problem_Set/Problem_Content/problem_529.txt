b"\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChefland is a city that always changes. It can be viewed as a grid with a fixed width NN (with NN columns numbered 11 through NN) and changing height. The rows of the grid are numbered with positive integers. Each cell in Chefland has a colour, which is either '0' or '1'.\nFrom a cell (x,y)(x,y), it is possible to move to one of the cells (x+1,y\xe2\x88\x921)(x+1,y\xe2\x88\x921), (x+1,y)(x+1,y) and (x+1,y+1)(x+1,y+1), but only if the destination cell exists and has the same colour as the origin cell.\nIn Chefland, rows sometimes appear or disappear. However, a row may only appear at the bottom of the grid or disappear if it was at the top of the grid; whenever that happens, rows are renumbered with positive integers from top to bottom in such a way that the topmost row has number 11.\nNow, Chef received a difficult task \xe2\x80\x95 keeping track of the number of ways to move from the topmost row to the bottommost row. He is asking you to help him answer QQ queries. Initially, the grid is empty \xe2\x80\x95 it has 00 rows. There are three types of queries:\n\nadd L: You are given a string LL with length NN. A new row appears; for each valid ii, the colour of the cell in this row and the ii-th column is LiLi.\nremove: The topmost row disappears.\npath c d: Find the number of paths starting in the cell in the topmost row and cc-th column and ending in the cell in the bottommost row and dd-th column. Two paths are considered different if there is a cell which is visited in one path, but not in the other. Since this number can be very big, compute it modulo 1,000,000,0071,000,000,007.\n\nInput\n\nThe first line of the input contains two space-separated integers NN and QQ.\nEach of the following QQ lines describes a query in the format described above.\n\nOutput\nFor each path query, print a single line containing one integer \xe2\x80\x95 the number of paths modulo 1,000,000,0071,000,000,007.\nConstraints\n\n1\xe2\x89\xa4N\xe2\x89\xa4201\xe2\x89\xa4N\xe2\x89\xa420\n1\xe2\x89\xa4Q\xe2\x89\xa4300,0001\xe2\x89\xa4Q\xe2\x89\xa4300,000\n|L|=N|L|=N\nLL contains only characters '0' and '1'\n1\xe2\x89\xa4c,d\xe2\x89\xa4N1\xe2\x89\xa4c,d\xe2\x89\xa4N\nfor each path or remove query, the grid is not empty\n\nSubtasks\nSubtask #1 (10 points):\n\nN\xe2\x89\xa410N\xe2\x89\xa410\nQ\xe2\x89\xa4300Q\xe2\x89\xa4300\n\nSubtask #2 (30 points):\n\nN\xe2\x89\xa410N\xe2\x89\xa410\nQ\xe2\x89\xa430,000Q\xe2\x89\xa430,000\n\nSubtask #3 (60 points): original constraints\n\n                        Sample Input 1\n                        \n\n\n\n\n\n5 9\nadd 11101\npath 1 2\nadd 01110\npath 3 2\nadd 00100\npath 3 3\nadd 10110\nremove\npath 1 2\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n0\n1\n3\n2\n\n\nExplanation\nAfter the first query, the city is:\n11101\n\nThere is no way to move from column 11 to column 22.\nAfter the third query, the city is:\n11101\n01110\n\nThere is only one way to move from the cell (1,3)(1,3) to the cell (2,2)(2,2): (1,3)\xe2\x86\x92(2,2)(1,3)\xe2\x86\x92(2,2).\nAfter the fifth query, the city is:\n11101\n01110\n00100\n\nThere are 33 ways to move from the cell (1,3)(1,3) to the cell (3,3)(3,3):\n\n(1,3)\xe2\x86\x92(2,2)\xe2\x86\x92(3,3)(1,3)\xe2\x86\x92(2,2)\xe2\x86\x92(3,3)\n(1,3)\xe2\x86\x92(2,3)\xe2\x86\x92(3,3)(1,3)\xe2\x86\x92(2,3)\xe2\x86\x92(3,3)\n(1,3)\xe2\x86\x92(2,4)\xe2\x86\x92(3,3)(1,3)\xe2\x86\x92(2,4)\xe2\x86\x92(3,3)\n\nAfter the eighth query, the city is:\n01110\n00100\n10110\n\nThere are 22 ways to move from the cell (1,1)(1,1) to the cell (3,2)(3,2):\n\n(1,1)\xe2\x86\x92(2,1)\xe2\x86\x92(3,2)(1,1)\xe2\x86\x92(2,1)\xe2\x86\x92(3,2)\n(1,1)\xe2\x86\x92(2,2)\xe2\x86\x92(3,2)(1,1)\xe2\x86\x92(2,2)\xe2\x86\x92(3,2)\n\n\n\n\nAuthor:\n7\xe2\x98\x85fmota\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/BINLAND\n\n\nTags:\n\n               \n                 Queues, Stacks, Matrix Multiplication, Dynamic Programming, Divide and Conquer\n                 \n                     \n                     Data Structures, Mathematics, Matrices, Algorithms, Recursion\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2608\n\n\nDate Added:\n27-02-2020\n\n\nTime Limit:\n1.1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"
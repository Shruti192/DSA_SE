b'\nRead problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nThere are NN people in a train and each of them gets on the train at time t=0t=0.\nEach person on the train wants to use the charging station on the train for some amount of time, but unfortunately, the train has only one charging station and can only be used by 11 person at any point in time.\nThe ithith person wants to use the charging station for AiAi minutes in total and will leave the train at time TiTi.\nA person will be satisfied after the journey, only if that person gets to use the charging station for the desired amount of time.\nFind a way to schedule the charging such that a maximum number of people is satisfied.\nIn order to schedule, you can pick any interval of time, say [L,R)[L,R), and ask the person ii to use the charging station from t=Lt=L and leave just before t=Rt=R.\nAfter this the person ii would have spent R\xe2\x88\x92LR\xe2\x88\x92L minutes on the charging station and any person who is still on the train can begin using the charging station starting from t=Rt=R.\nAn interval scheduling will be a set of time intervals and people assigned to those intervals.\nA schedule is valid if:\n\nNo two intervals in the schedule intersect each other. Note that all [L,R)[L,R) and [R,S)[R,S) do not intersect each other.\nFor all people ii and all intervals [L,R)[L,R) assigned to ii, 0\xe2\x89\xa4L\xe2\x89\xa4R\xe2\x89\xa4Ti0\xe2\x89\xa4L\xe2\x89\xa4R\xe2\x89\xa4Ti, i.e. each person is not assigned to an interval of time when they are not on the train.\n\nYou have to find optimal scheduling that does not contain more than 2N2N intervals.\nIt is guaranteed that there always exists optimal scheduling with the given constraints.\nIf there are many such schedules, you can output any of them.\nInput Format\n\nThe first line contains a single integer QQ denoting the number of test cases. The description of QQ test cases follows.\nEach test case contains 33 lines of input.\nThe first line of each test case contains a single integer NN, the number of people on the train.\nThe second line of each test case contains NN space-separated integers, A1,A2,\xe2\x80\xa6ANA1,A2,\xe2\x80\xa6AN, where AiAi is the amount of time that the ithith person needs to use the charger.\nThe third line of each test case contains NN space separated integers, T1,T2,\xe2\x80\xa6TnT1,T2,\xe2\x80\xa6Tn, where TiTi is the time at which the ithith person leaves the train.\n\nOutput Format\n\nFor each test case, in the first line, print a single integer M(\xe2\x89\xa42N)M(\xe2\x89\xa42N), the number of different intervals that you want to schedule.\nMM lines follow. For each valid ii, the ithith of these lines should contain three space-separated integers, i,L,Ri,L,R denoting that the person ii should use the charging station from [L,R)[L,R).\nThe number of satisfied people should be maximum.\nThe scheduling should be valid.\nIt is possible to schedule the same person multiple times.\nThe order in which the intervals are displayed does not matter.\n\nConstraints\n\n1\xe2\x89\xa4Q\xe2\x89\xa43\xe2\x8b\x851051\xe2\x89\xa4Q\xe2\x89\xa43\xe2\x8b\x85105\n1\xe2\x89\xa4N\xe2\x89\xa43\xe2\x8b\x851051\xe2\x89\xa4N\xe2\x89\xa43\xe2\x8b\x85105\n0\xe2\x89\xa4Ai\xe2\x89\xa43\xe2\x8b\x851050\xe2\x89\xa4Ai\xe2\x89\xa43\xe2\x8b\x85105  for each valid ii\n0\xe2\x89\xa4Ti\xe2\x89\xa43\xe2\x8b\x851050\xe2\x89\xa4Ti\xe2\x89\xa43\xe2\x8b\x85105  for each valid ii\nThe sum of NN over all testcases does not exceed 3\xe2\x8b\x851053\xe2\x8b\x85105\n\nSubtasks\n\nSubtask #1 (10 points) : TiTi-s are equal for all NN people\nSubtask #2 (90 points) : Original constraints\n\n\n                        Sample Input 1\n                        \n\n\n\n\n\n4\n5\n31 32 6 13 7\n14 50 34 4 31\n5\n43 26 22 11 30\n26 4 41 46 49\n5\n36 40 49 19 37\n18 11 48 15 33\n5\n16 3 24 21 21\n24 31 36 49 50\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n3\n3 0 6\n5 6 13\n2 13 45\n2\n4 0 11\n3 11 33\n0\n3\n2 0 3\n1 3 19\n4 19 40\n\n\nExplanation\nTest case 1: Person 11 and Person 44 can never be satisfied because the time they spend on the train (1414 and 44 respectively) is less than the amount of time they want to spend for charging. The other three people can be assigned as shown (Person 33 in the interval [0,6)[0,6), Person 55 in the interval [6,13)[6,13) and finally Person 22 in the interval [13,45)[13,45). Note that there are multiple solutions, for example, we could have also assigned Person 55 to [0,7)[0,7) and Person 33 to [7,13)[7,13) instead. Both are considered correct.\nTest case 2: Person 11 and Person 22 can never be satisfied (they spend less time on the train than the amount of time they need to use the charging station). Among the remaining three, we cannot satisfy all of them, since the total time required would be 30+11+22=6330+11+22=63, but t=49t=49, all of them would have left the train. However we can select either Persons 33 and Person 44 or Person 44 and Person 55 and schedule them in any order, and in both cases, both of the persons would be satisfied.\nTest case 3: No one can be satisfied and hence the answer is 00.\nTest case 4: Apart from Person 22 (who has a very low charging time), we cannot hope to satisfy more than 22 of the others. This is because the sum of the 33 least times is already 5858 and everyone would have left the train by t=50t=50. Therefore the maximum number of people we can hope to satisfy is 33, and the given solution constructs it.\n\n\n\nAuthor:\nsrikkanth_adm\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/CHARGE\n\n\nTags:\n\n               \n                 aug21, aug21, constructive, constructive, easy-medium, easy-medium, greedy, greedy, srikkanth_adm\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2576\n\n\nDate Added:\n31-07-2021\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'
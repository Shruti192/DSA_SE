b"\n\nFarzi Coder has been assigned an important coding assignment by his boss Programmer Bhai. Now, Farzi Coder has done coding his project and has to submit it to a central git repository.\n    In git, before committing we have to add the files which we want to commit to the stage. We can add (stage) or remove (unstage) files to/from the stage. Initially the stage is empty.\nProgrammer Bhai is very particular about what goes into the repository and what doesn't. He has given a list of files alongwith whether he wants the file in the stage or not.\n    e.g.\n    \n    stage /code/lib/acpp\n    stage /code/lib/bcpp\n    unstage /code/lib/aout\n    \n    This means we want /code/lib/acpp and /code/lib/bcpp to be in the stage while /code/lib/aout should not be in the stage.\n    There are 2 git commands to control staging:\n    git add <path>\n    git remove <path>\n    \n    The path here can be a path to a file or a path to a directory. If the path is to a directory, the command applies to all the files and subdirectories inside that directory recursively.\n Farzi Coder wants to commit the code asap.\n    What is the minimum number of git commands needed to add all the required files to stage while making sure none of the unstage files are in the stage. \nInput\n    The first line of the input has the number T denoting the number of test cases.\n\n    The first line of each test case has the number N denoting the number of files in this case.\n\n    Each of the next N lines contains a word denoting whether the following file should be on the stage or not followed by the path to the file.\n\n    i.e. the 2 types of input will be stage <path> and unstage <path>. \nOutput\n\n    For each test case, output the number of minimum git commands needed.\n   \nConstraints\n\n1 \xe2\x89\xa4 T \xe2\x89\xa4 10\n1 \xe2\x89\xa4 N \xe2\x89\xa4 100\nThe length of each path doesn't exceed 100\nEach path is a valid path to a file. Each path input follows these rules:\n\nIt doesn't end with a forward slash (/)\nEach path starts from the root directory (/)\nThere are no two consecutive forward slashes\nEach file or directory name consists only of lowercase alphabets\nAll paths in a test case are distinct\nThere will be no file - directory conflict. e.g. consider /a/b/c and /a/b. Here b is both a file and a directory.\n\n\nSample\nInput\n3\n3\nstage /code/lib/acpp\nstage /code/lib/bcpp\nunstage /code/lib/aout\n2\nunstage /code/lib/acpp\nunstage /code/lib/bcpp\n3\nstage /code/lib/acpp\nstage /code/lib/bcpp\nstage /code/lib/aout\n    Output\n2\n0\n1\n    Explanation\n Case 1: The following 2 commands are enough:\n    git add /\n    git remove /code/lib/aout\n        The first command adds the entire project to the stage while the second command removes aout from the stage as required.\n\nCase 2: As initially there are no files in the stage, no commands are necassary.\n\nCase 3: We add all the files to stage using git add / or git add /code/lib/\n\n\n\nAuthor:\n6\xe2\x98\x85balajiganapath\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/AMGIT\n\n\nTags:\n\n               \n                 acm15amr, balajiganapath, dynamic-programming, hashing, strings, trees\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\nN/A\n\n\nDate Added:\n20-12-2015\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nJAVA, C, CPP14, PYP3\n\n\n\n\n\nSubmit\n\n"
b"\nNaveen made an encryption algorithm for the Introduction to Cryptography course project. The algorithm takes input a bit-string SS of length NN and returns a ciphertext of the same length. The pseudo-code for the algorithm is -\nEncryption (S, N )\n{\n    cipher = S\n    for i \xe2\x86\x92 1 to N : \n        j = ( i == N ) ? 1 : i+1\n        if ( S[i] == '1' and S[j] == '0' ) :\n            cipher[i] = '0'\n            cipher[j] = '1'\n\n    return cipher        \n}\n\nNote:\n\nSS contains only '1's and '0's.\nThe given algorithm works on 1-based indexing.\n\nFor example, if the original bit-string SS was 010101, the encryption function returns 101010.\nUnfortunately, the above algorithm is not perfect, as more than one SS can have the same ciphertext. \nFor a given ciphertext, Naveen wants to find out how many original bit-string SS are possible.\n    For example, for the ciphertext '01001', there are two possible original strings - '10001' and '10010'.\nNaveen is busy preparing for the end-sem exams, can you help him by implementing a function that calculates the total possible original strings for a given ciphertext?.\nThe answer can be very large, so print answeranswer% (109+7)(109+7).\n\nInput:\n\nFirst-line will contain TT, the number of test cases. \nEach test case contains a single line of input, a string consists of 1s and 0s.\n\nOutput:\n\nFor each test case print an integer, answeranswer% (109+7)(109+7) for the problem in a separate line. \n\nConstraints\n\n1\xe2\x89\xa4T\xe2\x89\xa4101\xe2\x89\xa4T\xe2\x89\xa410\n2\xe2\x89\xa4lengthOfString\xe2\x89\xa41052\xe2\x89\xa4lengthOfString\xe2\x89\xa4105\nSum of length of strings over all test cases does not exceed 105105.\n\nSample Input:\n2\n010001001\n101010\n\nSample Output:\n2\n4\n\nEXPLANATION:\nIn the first sample, the only possible original strings are 100010010100010010 and 100010001100010001.\n\n\n\nAuthor:\n4\xe2\x98\x85sherlock8696\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/CAC1\n\n\nTags:\n\n               \n                 codechef, dynamic-programming, easy-medium, sherlock8696\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\nN/A\n\n\nDate Added:\n11-03-2021\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"
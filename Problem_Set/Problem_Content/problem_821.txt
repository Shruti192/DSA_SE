b"\n\xc2\xa0\nFluffy the squirrel has a set of n nodes, numbered from 1 to n. Initially, there are no edges between any pair of nodes.\n\nFluffy can perform q operations. He can either :\nAdd an undirected edge between node i and node j, with length c\nAsk for the distance between node i and node j. (The distance is the sum of lengths on the shortest path from i to j)\n\nIt is guaranteed that, at any time, no cycles will be formed, i.e. the given graph is always a forest of trees. Can you perform the operations efficiently?\n\n\xc2\xa0\nInput\nThe first line of the input contains two space-seperated integers n, q, the number of nodes and number of operations respectively. The next q lines denote the operations. The first integer on each line is either 1 or 2, denoting the type of query.\n\nIf the type of query is 1, 3 space-seperated integers follow, denoting i, j, c respectively, as described above. Otherwise, 2 space-seperated integers follow, denoting i, j.\n\nSince we want you to answer the queries online, i.e. you must answer the current query before processing the next query, we encoded the queries in a special manner. Let ans be the answer of the last query of type 2. (i.e. the last distance query) If there is no such query (i.e. no queries of type 2 has been asked), let ans = 0. Then, the values i, j of the current query can be found by the following formula :\n\ni = (i_input + ans)%n + 1\n\nj = (j_input + ans)%n + 1\n\nwhere i_input and j_input are the values of i and j given in the input. The % operator is the modulo operator. \n\xc2\xa0\nOutput\nFor each query of type 2, output a single line containing the answer for that query. If there is no path between the two given nodes, the answer is -1.\n\xc2\xa0\nConstraints\n\n1 \xe2\x89\xa4 n, q \xe2\x89\xa4 200000\n1 \xe2\x89\xa4 c \xe2\x89\xa4 109\n\nSubtasks\n\nSubtask 1 (22 points) : 1 \xe2\x89\xa4 n, q \xe2\x89\xa4 5000\nSubtask 2 (29 points) : All queries of type 2 come after queries of type 1\nSubtask 3 (49 points) : Original Constraints\n\n\xc2\xa0\nExample\nInput:\n5 7\n1 5 1 5\n1 2 4 7\n2 1 3\n1 5 4 1\n2 3 4\n1 2 1 6\n2 2 5\nOutput:\n-1\n8\n7\n\n\xc2\xa0\nExplanation\nExample case. For the first query of type 2, nodes 2 and 4 (note that the values 2 and 4 are obtained after decoding the input) aren't connected, so we output -1. For the second query of type 2, the distance between nodes 3 and 4 is 7 + 1 = 8. For the third query of type 2, the distance between nodes 1 and 4 is 6 + 1 = 7.\n\n\n\n\nAuthor:\n6\xe2\x98\x85zscoder\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/MCO16305\n\n\nTags:\n\n               \n                 disjoint-set-union, dynamic-programming, lowest-common-ancestor, mco1602, small-to-large, trees, zscoder\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\nN/A\n\n\nDate Added:\n22-11-2016\n\n\nTime Limit:\n1.5 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, CPP14, PYTH, PYP3\n\n\n\n\n\nSubmit\n\n"
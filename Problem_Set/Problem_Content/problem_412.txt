b'\nChef Sridhar listenes to music while cooking. He realized that the lyrics of many songs contain the same words. He thought of a task to do in his leisure; pick a set of words and find the frequency of the words in the lyrics of various songs.\nA word A from the lyrics is said to match a given word W if W is a substring of A.\nNote Some words from the lyrics can match multiple given words. For e.g, shawty, matches both shawty as well as hawt. The word shawty in the lyrics must be counted in the frquency of shawty as well as hawt.\nYou may assume that all the comparisons must be case sensitive. Also, there are no whitespaces within a word in the given list, or in the lyrics. Words in the lyrics are separated by "-" characters (of course without the quotes).\nInput\nFirst line contains an integer W, denoting the number of words Chef has decided to find the frequencies of. Then follow W lines containing a word (P) each. The next line contains N, the number of lyrics Chef decided to index. Followed by N lines containing a string (S) which chef has to index. You can assume that S doesn\'t contain any whitespace characters.\nOutput\nThe output contains W lines each denoting the frequency of the respective word in all of the lyrics together.\nConstraints\n\n1 \xe2\x89\xa4 W \xe2\x89\xa4 500\n1 \xe2\x89\xa4 |P| \xe2\x89\xa4 5000, where |P| denotes length of each word.\n1 \xe2\x89\xa4 N \xe2\x89\xa4 100\n1 \xe2\x89\xa4 |S| \xe2\x89\xa4 50000, where |S| denotes the length of lyric of each song.\nAll the characters will be either uppercase or lowercase english alphabets or numbers or "-".\n\nExamples\nSample Input 1\n5\nhe\nshe\nsher\nhis\nhers\n2\nushers\nshe-said-he-said-she-said-he-said-his\n\nSample Output 1\n5\n3\n1\n1\n1\n\n\nSample Input 2\n3\nwho\nshawty\nhawt\n2\nGet-it-shawty-Get-it-shawty\nWhoa-W-W-Whoa-Shawtyyyyy\n\nSample Output 2\n0\n2\n3\n\n\n\n\n\nAuthor:\nkaush_adm\n\n\nTester:\n6\xe2\x98\x85white_king\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/LYRC\n\n\nTags:\n\n               \n                 Aho Corasick, DP Approach, BFS\n                 \n                     \n                     Advanced Algorithms, String Matching, Algorithms, Dynamic Programming, Graph Algos, Traversals\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2360\n\n\nDate Added:\n3-06-2012\n\n\nTime Limit:\n3 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'